@using d20TG.Features.Scenarios.State
@using d20TG.Features.Scenarios.Model

@if (AttackerBuilds != null)
{
    <div class="flex flex-row gap-2 overflow-x-auto snap-x">
        @foreach (var build in AttackerBuilds)
        {
            <div class="snap-center flex-shrink-0">
                @if (build.Id == Scenario.FirstAttackerId)
                {
                    <AttackerBuildCard ScenarioId="@ScenarioId" 
                                       AttackerBuild="@build" />
                }
                else
                {
                    <AttackerBuildCard ScenarioId="@ScenarioId" 
                                       AttackerBuild="@build" 
                                       OnDeleteClickCallback="@OnAttackerDeleteClickCallback"/>
                }
            </div>
        }
        <button @onclick="OnAttackerAddClickCallback"
                class="focus:outline-none text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 snap-end">
            <i>
                <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 5.757v8.486M5.757 10h8.486M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                </svg>
            </i>
        </button>
    </div>
}

@code {

    [Parameter, EditorRequired]
    public string ScenarioId { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public AttackerBuildState[]? AttackerBuilds { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnAttackerAddClickCallback { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string> OnAttackerDeleteClickCallback { get; set; }

}