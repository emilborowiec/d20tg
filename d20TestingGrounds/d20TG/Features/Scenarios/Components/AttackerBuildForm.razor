@using d20TG.Features.Scenarios.State
@using d20TG.Domain
@using d20TG.Features.Scenarios.Model
@using d20TG.Features.Scenarios.Utils

<EditForm Model="_model">
    <ObjectGraphDataAnnotationsValidator />
    <ValidationSummary/>
    <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
        <div class="grid gap-6 mb-6 md:grid-cols-1">
            <label class="block text-sm font-medium text-gray-900 dark:text-white">
                Label
                <InputText @bind-Value="_model.Label"
                           class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
            </label>
            <label class="block text-sm font-medium text-gray-900 dark:text-white">
                Color
                <input type="color"
                       value="@_model.ColorHex"
                       @onchange="HandleColorChange"
                       class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full"/>
            </label>
            <label class="block text-sm font-medium text-gray-900 dark:text-white">
                Attack Bonus
                <InputNumber min="-100"
                             max="100"
                             @bind-Value="_model.AttackBonus"
                             class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
            </label>
            <label class="block text-sm font-medium text-gray-900 dark:text-white">
                Damage Bonus
                <InputNumber min="0"
                             max="100"
                             @bind-Value="_model.DamageBonus"
                             class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
            </label>
            <div class="">

                <label for="dice-count" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Damage Dice</label>

                <div class="flex flex-row">

                    <InputNumber id="dice-count"
                                 min="1"
                                 max="100"
                                 @bind-Value="_model.DamageDice.DiceCount"
                                 class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>

                    <InputSelect TValue="DiceType"
                                 @bind-Value="_model.DamageDice.DiceType"
                                 class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        @foreach (var value in Enum.GetValues<DiceType>())
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <button @onclick="HandleSaveClickAsync"
                    class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 flex flex-row justify-center">
                save
            </button>
            <button @onclick="@(async () => await OnCancel.InvokeAsync())"
                    class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 flex flex-row justify-center">
                cancel
            </button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public AttackerBuildState? InitialState { get; set; }
    [Parameter]
    public EventCallback<AttackerBuildState> OnSave { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private AttackerLabeledBuild _model = null!;
    

    protected override void OnParametersSet()
    {
        SetFormModelFromInitialState();
    }

    private void SetFormModelFromInitialState()
    {
        _model = new AttackerLabeledBuild(InitialState?.Id ?? Guid.NewGuid().ToString());
        if (InitialState.HasValue)
        {
            _model.UpdateAttackerFromReadOnlyState(InitialState.Value);
        }
    }

    private void HandleColorChange(ChangeEventArgs eventArgs)
    {
        _model.ColorHex = eventArgs.Value as string ?? string.Empty;
    }

    private async Task HandleSaveClickAsync()
    {
        await OnSave.InvokeAsync(_model.ToReadOnlyState());
    }

}