@using d20TG.Features.Scenarios.State
<div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow">
    <div class="grid gap-6 mb-6 md:grid-cols-1">
        <label class="block text-sm font-medium text-gray-900 dark:text-white">
            Label
            <input type="text"
                   value="@State.Label"
                   @onchange="HandleLabelChangeAsync"
                   class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
        </label>
        <label class="block text-sm font-medium text-gray-900 dark:text-white">
            Color
            <input type="color"
                   value="@State.ColorHex"
                   @onchange="HandleColorChangeAsync"
                   class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full"/>
        </label>
        <label class="block text-sm font-medium text-gray-900 dark:text-white">
            Hit Points
            <input type="number"
                   min="0"
                   max="1000"
                   value="@State.HitPoints"
                   @onchange="HandleHitPointsChangeAsync"
                   class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
        </label>
        <label class="block text-sm font-medium text-gray-900 dark:text-white">
            Armor Class
            <input type="number"
                   min="-100"
                   max="100"
                   value="@State.ArmorClass"
                   @onchange="HandleArmorClassChangeAsync"
                   class="mt-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
        </label>
        @if (OnDeleteClickCallback.HasDelegate)
        {
            <button @onclick="@(async () => await OnDeleteClickCallback.InvokeAsync(@State.Id))"
                    class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 flex flex-row justify-center">
                <i>
                    <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h16M7 8v8m4-8v8M7 1h4a1 1 0 0 1 1 1v3H6V2a1 1 0 0 1 1-1ZM3 5h12v13a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V5Z"/>
                    </svg>
                </i>
            </button>
        }
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public DefenderBuildState State { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<DefenderBuildState> OnDefenderBuildStateChangeCallback { get; set; }

    [Parameter]
    public EventCallback<string> OnDeleteClickCallback { get; set; }

    private async Task HandleHitPointsChangeAsync(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var value))
        {
            await OnDefenderBuildStateChangeCallback.InvokeAsync(State with { HitPoints = value });
        }
    }

    private async Task HandleArmorClassChangeAsync(ChangeEventArgs eventArgs)
    {
        if (int.TryParse(eventArgs.Value as string, out var value))
        {
            await OnDefenderBuildStateChangeCallback.InvokeAsync(State with { ArmorClass = value });
        }
    }

    private async Task HandleLabelChangeAsync(ChangeEventArgs eventArgs)
    {
        await OnDefenderBuildStateChangeCallback.InvokeAsync(State with { Label = eventArgs.Value as string ?? "Defender" });
    }

    private async Task HandleColorChangeAsync(ChangeEventArgs eventArgs)
    {
        await OnDefenderBuildStateChangeCallback.InvokeAsync(State with { ColorHex = eventArgs.Value as string ?? "#0000FF" });
    }

}