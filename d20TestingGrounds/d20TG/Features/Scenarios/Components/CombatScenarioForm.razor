@using d20TG.Features.Scenarios.Model
@using d20TG.Features.Scenarios.State
@using d20TG.Features.Scenarios.Utils
@inject IMyNavigationManager MyNavigation

<div>
    <div class="mb-2">
        <h3 class="text-3xl">Name</h3>
        <input type="text"
               @bind="_model.Name"
               class="bg-gray-50 border border-gray-300 text-gray-900 text-2xl rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 w-full"/>
    </div>
    <div class="mb-2">
        <h3 class="text-3xl">Defenders</h3>
        <Defenders DefenderBuilds="@_model.ToReadOnlyState().DefenderBuildStates" OnDefenderBuildStateChangeCallback="HandleDefenderBuildStateChange"/>
    </div>
    <div class="mb-2">
        <h3 class="text-3xl">Attackers</h3>
        <Attackers AttackerBuilds="@_model.ToReadOnlyState().AttackerBuildStates" OnAttackerBuildStateChangeCallback="HandleAttackerBuildStateChange"/>
    </div>

    <button @onclick="HandleSaveAndRunClickAsync"
            class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
        Save and Run
    </button>
    <button @onclick="HandleSaveAndExitClickAsync"
            class="py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
        Save and Exit
    </button>
    <button @onclick="HandleDiscardClickAsync"
            class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">
        Discard
    </button>
</div>

@code {
    private CombatScenario _model = new();

    [Parameter, EditorRequired]
    public EventCallback<CombatScenario> OnSaveAndRunCallback { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CombatScenario> OnSaveAndExitCallback { get; set; }

    private void HandleDefenderBuildStateChange(DefenderBuildState defenderBuildState)
    {
        _model.DefenderBuilds[0].UpdateDefenderFromReadOnlyState(defenderBuildState);
    }

    private void HandleAttackerBuildStateChange(AttackerBuildState attackerBuildState)
    {
        _model.AttackerBuilds[0].UpdateAttackerFromReadOnlyState(attackerBuildState);
    }

    private async Task HandleSaveAndRunClickAsync()
    {
        await OnSaveAndRunCallback.InvokeAsync(_model);
    }

    private async Task HandleSaveAndExitClickAsync()
    {
        await OnSaveAndExitCallback.InvokeAsync(_model);
    }

    private void HandleDiscardClickAsync()
    {
        MyNavigation.NavigateToHome();
    }

}