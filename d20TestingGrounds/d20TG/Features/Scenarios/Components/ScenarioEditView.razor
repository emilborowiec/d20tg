@using d20TG.Features.Scenarios.Model
@using d20TG.Features.Scenarios.Services
@using d20TG.Features.Scenarios.Utils
@using System.Diagnostics
@inject IScenarioRepository ScenarioRepository

@if (_model == null)
{
    <div>
        <h2>Loading...</h2>
    </div>
}
else
{
    <div>
        <div class="mb-2">
            @if (_editingName)
            {
                <ScenarioNameForm InitialName="@_model.Name" OnCancel="@(() => _editingName = false)" OnSave="@HandleScenarioNameSaveAsync"/>
            }
            else
            {
                <div class="flex flex-row items-center border-b">
                    <h3 class="text-3xl grow">@_model.Name</h3>
                    <button type="button"
                            @onclick="@(() => _editingName = true)"
                            class="text-blue-700 hover:bg-blue-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium text-sm p-2.5 text-center inline-flex items-center rounded-lg ml-2">
                        <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 21">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.418 17.861 1 20l2.139-6.418m4.279 4.279 10.7-10.7a3.027 3.027 0 0 0-2.14-5.165c-.802 0-1.571.319-2.139.886l-10.7 10.7m4.279 4.279-4.279-4.279m2.139 2.14 7.844-7.844m-1.426-2.853 4.279 4.279"/>
                        </svg>
                        <span class="sr-only">Edit icon</span>
                    </button>
                </div>
            }
        </div>
        <div class="mb-2 overflow-x-hidden bg-green-300 p-4">
            <div class="flex flex-row items-center">
                <h4 class="text-2xl mb-2 grow">Defenders</h4>
                <button @onclick="HandleAddDefenderClickAsync"
                        class="text-blue-700 hover:bg-blue-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center">
                    <i>
                        <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 5.757v8.486M5.757 10h8.486M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                        </svg>
                    </i>
                </button>
            </div>
            <Defenders ScenarioId="@_model.Id"
                       DefenderBuilds="@_model.ToReadOnlyState().DefenderBuildStates"
                       OnDefenderDeleteClickCallback="HandleDeleteDefenderClickAsync"/>
        </div>
        <div class="mb-2 overflow-x-hidden bg-red-300 p-4">
            <div class="flex flex-row items-center">
                <h4 class="text-2xl mb-2 grow">Attackers</h4>
                <button @onclick="HandleAddAttackerClickAsync"
                        class="text-blue-700 hover:bg-blue-700 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center">
                    <i>
                        <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 5.757v8.486M5.757 10h8.486M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                        </svg>
                    </i>
                </button>
            </div>
            <Attackers ScenarioId="@_model.Id"
                       AttackerBuilds="@_model.ToReadOnlyState().AttackerBuildStates"
                       OnAttackerDeleteClickCallback="HandleDeleteAttackerClickAsync"/>
        </div>

    </div>
}

@code {
    private Scenario? _model;
    private bool _editingName = false;

    [Parameter, EditorRequired]
    public string ScenarioId { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        var scenario = await ScenarioRepository.LoadScenarioAsync(ScenarioId);
        _model = scenario ?? throw new ArgumentException($"Scenario {ScenarioId} was not found");
    }

    private async Task HandleAddAttackerClickAsync()
    {
        Debug.Assert(_model != null, nameof(_model) + " != null");
        _model.AttackerBuilds.Add(new AttackerLabeledBuild(Guid.NewGuid().ToString()));
        await ScenarioRepository.SaveScenarioAsync(_model);
    }

    private async Task HandleAddDefenderClickAsync()
    {
        Debug.Assert(_model != null, nameof(_model) + " != null");
        _model.DefenderBuilds.Add(new DefenderLabeledBuild(Guid.NewGuid().ToString()));
        await ScenarioRepository.SaveScenarioAsync(_model);
    }

    private async Task HandleDeleteAttackerClickAsync(string id)
    {
        Debug.Assert(_model != null, nameof(_model) + " != null");
        _model.AttackerBuilds.Remove(_model.AttackerBuilds.First(x => x.Id == id));
        await ScenarioRepository.SaveScenarioAsync(_model);
    }

    private async Task HandleDeleteDefenderClickAsync(string id)
    {
        Debug.Assert(_model != null, nameof(_model) + " != null");
        _model.DefenderBuilds.Remove(_model.DefenderBuilds.First(x => x.Id == id));
        await ScenarioRepository.SaveScenarioAsync(_model);
    }

    private async Task HandleScenarioNameSaveAsync(string newName)
    {
        Debug.Assert(_model != null, nameof(_model) + " != null");
        _model.Name = newName;
        _editingName = false;
        await ScenarioRepository.SaveScenarioAsync(_model);
    }

}