@using d20TG.Features.Scenarios.Services
@using d20TG.Features.Scenarios.State
@using d20TG.Features.Scenarios.Utils
@using d20TG.Features.Simulations.Model
@attribute [Route(MyRoutes.ScenarioSimulationRoute)]
@inject ICombatScenarioRepository ScenarioRepository

<PageTitle>Simulation | d20 Testing Grounds</PageTitle>

<h2 class="text-4xl font-medium mb-8">Scenario Simulation & Stats</h2>

<div class="grid grid-cols-2 gap-4">
    @if (_scenarioState != null)
    {
        <CombatScenarioStateView ScenarioState="@_scenarioState.Value"/>

        <SampleControl InitialValue="SampleSize" OnRerunSampleClickCallback="HandleRerunSampleClick" />

        @if (_runs.Count > 0)
        {
            <SimulationRunsView Runs="_runs" />

            <h3 class="text-3xl font-bold">Rounds to beat distribution: </h3>
            var roundsToBeatDistribution = GetRoundsToBeatDistribution(_runs);
            foreach (var points in roundsToBeatDistribution)
            {
                <p>@points.RunCount rounds: @points.RunCount runs</p>
            }

            <ApexChart TItem="RoundsToBeatDataPoint"
                       Title="Rounds to Beat">
                <ApexPointSeries TItem="RoundsToBeatDataPoint"
                                 Items="roundsToBeatDistribution"
                                 Name="Simulations"
                                 XValue="@(e => e.RoundsToBeat)"
                                 YValue="@(e => e.RunCount)"
                                 SeriesType="SeriesType.Bar"/>
            </ApexChart>
        }
    }
    else
    {
        <p>Scenario not found or expired!</p>
    }
</div>

@code {

    [Parameter]
    public string? ScenarioId { get; set; }

    public int SampleSize { get; set; } = 20;

    private CombatScenarioState? _scenarioState;
    private List<SimulationRun> _runs = new();

    private static IEnumerable<RoundsToBeatDataPoint> GetRoundsToBeatDistribution(ICollection<SimulationRun> runs)
    {
        return runs.GroupBy(x => x.Rounds.Count).Select(g => new RoundsToBeatDataPoint { TotalRunCount = runs.Count, RoundsToBeat = g.Key, RunCount = g.Count() });
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ScenarioId == null)
        {
            return;
        }

        var scenario = await ScenarioRepository.LoadScenarioAsync(ScenarioId);
        Console.WriteLine($"Loaded scenario: {ScenarioId} {scenario}");
        _scenarioState = scenario.ToReadOnlyState();

        await base.OnParametersSetAsync();
    }

    private void HandleRerunSampleClick(int sampleSize)
    {
        SampleSize = sampleSize;
        if (_scenarioState == null)
        {
            return;
        }

        _runs = CombatSimulator.RunSimulations(SampleSize, _scenarioState.Value);
    }

}

