@attribute [Route(MyRoutes.ScenarioSimulationRoute)]
@using d20TG.Features.Scenarios.Services
@using d20TG.Features.Scenarios.State
@using d20TG.Features.Scenarios.Utils
@using d20TG.Features.Simulations.Model
@inject IScenarioRepository ScenarioRepository

<PageTitle>Simulation | d20 Testing Grounds</PageTitle>

<h2 class="text-4xl font-medium mb-8">Scenario Simulation & Stats</h2>

<div class="md:columns-2 gap-4">
    @if (_scenarioState != null)
    {
        <div class="mb-4 break-inside-avoid">
            <CombatScenarioStateView ScenarioState="@_scenarioState.Value"/>
        </div>
        <div class="mb-4 break-inside-avoid">
            <SampleControl InitialValue="SampleSize" OnRerunSampleClickCallback="HandleRerunSampleClick"/>
        </div>

        @if (_runs.Count > 0)
        {
            <div class="mb-4 break-inside-avoid">
                <AveragesView Runs="_runs"/>
            </div>
            <div class="mb-4 break-inside-avoid">
                <SimulationRunsView Runs="_runs"/>
            </div>
            <div class="mb-4 break-inside-avoid">
                <RoundsToBeatView Runs="_runs"/>
            </div>
            <div class="mb-4 break-inside-avoid">
                <DamagePerRoundView Runs="_runs"/>
            </div>
            <div class="mb-4 break-inside-avoid">
                <AccuracyView Runs="_runs"/>
            </div>
        }
    }
    else
    {
        <p>Scenario not found or expired!</p>
    }
</div>

@code {

    [Parameter]
    public string? ScenarioId { get; set; }

    public int SampleSize { get; set; } = 20;

    private ScenarioState? _scenarioState;
    private List<SimulationRun> _runs = new();

    protected override async Task OnParametersSetAsync()
    {
        if (ScenarioId == null)
        {
            return;
        }

        var scenario = await ScenarioRepository.LoadScenarioAsync(ScenarioId);
        if (scenario == null)
        {
            return;
        }
        _scenarioState = scenario.ToReadOnlyState();

        HandleRerunSampleClick(SampleSize);
    }

    private void HandleRerunSampleClick(int sampleSize)
    {
        SampleSize = sampleSize;
        if (_scenarioState == null)
        {
            return;
        }

        _runs = CombatSimulator.RunSimulations(SampleSize, _scenarioState.Value);
    }

}